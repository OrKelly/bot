from typing import Iterable

from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup

from callbacks.factory import TaskCallback
from enums.tasks import TaskStatusEnum
from schemas.tasks import TaskSchema, TaskShortSchema


def get_tasks_list_keyboard(
    tasks: Iterable[TaskShortSchema],
    current_page: int,
    has_next: bool,
    has_previous: bool,
    callback_data: str,
):
    buttons = []
    for task in tasks:
        task_button = [
            InlineKeyboardButton(
                text=f"üìÑ –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –æ {task.title}",  # –î–æ–±–∞–≤–ª–µ–Ω —Å–º–∞–π–ª–∏–∫
                callback_data=TaskCallback(
                    action="details", task_id=task.id
                ).pack(),
            )
        ]
        buttons.append(task_button)

    pagination_buttons = []
    if has_previous:
        pagination_buttons.append(
            InlineKeyboardButton(
                text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                callback_data=f"{callback_data}_{current_page - 1}",
            )
        )
    if has_next:
        pagination_buttons.append(
            InlineKeyboardButton(
                text="–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è",
                callback_data=f"{callback_data}_{current_page + 1}",
            )
        )

    if pagination_buttons:
        buttons.append(pagination_buttons)
    buttons.append(
        [
            InlineKeyboardButton(
                text="üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É –∑–∞–¥–∞—á", callback_data="all_tasks"
            )
        ]
    )
    return InlineKeyboardMarkup(inline_keyboard=buttons)


def get_task_type_choose_keyboard():
    buttons = [
        [
            InlineKeyboardButton(
                text="üìã –ê–∫—Ç–∏–≤–Ω—ã–µ", callback_data="active_tasks"
            ),  # –î–æ–±–∞–≤–ª–µ–Ω —Å–º–∞–π–ª–∏–∫
            InlineKeyboardButton(
                text="üìÅ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ", callback_data="archive_tasks"
            ),  # –î–æ–±–∞–≤–ª–µ–Ω —Å–º–∞–π–ª–∏–∫
        ]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)


def get_task_detail_keyboard(task: TaskSchema):
    buttons = []

    if task.status != TaskStatusEnum.DONE:
        buttons.append(
            [
                InlineKeyboardButton(
                    text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥–∞—á—É",
                    callback_data=TaskCallback(
                        action="complete_task", task_id=task.id
                    ).pack(),
                ),
                InlineKeyboardButton(
                    text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á—É",
                    callback_data=TaskCallback(
                        action="update_task", task_id=task.id
                    ).pack(),
                ),
            ]
        )
    else:
        buttons.append(
            [
                InlineKeyboardButton(
                    text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á—É",
                    callback_data=TaskCallback(
                        action="update_task", task_id=task.id
                    ).pack(),
                )
            ]
        )

    buttons.append(
        [
            InlineKeyboardButton(
                text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É",
                callback_data=TaskCallback(
                    action="delete_task", task_id=task.id
                ).pack(),
            )
        ]
    )
    buttons.append(
        [
            InlineKeyboardButton(
                text="üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É –∑–∞–¥–∞—á", callback_data="all_tasks"
            )
        ]
    )
    return InlineKeyboardMarkup(inline_keyboard=buttons)


def get_back_keyboard():
    buttons = [
        [
            InlineKeyboardButton(
                text="üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É –∑–∞–¥–∞—á", callback_data="all_tasks"
            )
        ]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)
